function [Message,Lpupil,Rpupil] = importSMITXT(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [LRAWXPX,LRAWYPX,RRAWXPX,RRAWYPX,LDIAXPX,LDIAYPX,LMAPPEDDIAMETERMM,RDIAXPX,RDIAYPX,RMAPPEDDIAMETERMM]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [LRAWXPX,LRAWYPX,RRAWXPX,RRAWYPX,LDIAXPX,LDIAYPX,LMAPPEDDIAMETERMM,RDIAXPX,RDIAYPX,RMAPPEDDIAMETERMM]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [LRawXpx,LRawYpx,RRawXpx,RRawYpx,LDiaXpx,LDiaYpx,LMappedDiametermm,RDiaXpx,RDiaYpx,RMappedDiametermm] = importfile('chris_a-eye_data Samples.txt',39, 4323);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/01/13 14:01:38

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 39;
    endRow = inf;
end

%% Format string for each line of text:
%   column4: text (%s)
%	column5: text (%s)
%   column6: text (%s)
%	column7: text (%s)
%   column8: text (%s)
%	column9: text (%s)
%   column10: text (%s)
%	column11: text (%s)
%   column12: text (%s)
%	column13: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%*s%*s%s%s%s%s%s%s%s%s%s%s%*s%*s%*s%*s%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
Message = dataArray{:, 1};
Lpupil = dataArray{:, 7};
Rpupil = dataArray{:, 10};



% find blanks
baseBlank = find(strcmp(Lpupil,''));

% remove blanks
Lpupil(baseBlank)={'0'};
Rpupil(baseBlank)={'0'};


% remove first line
Lpupil(1:2)=[];
Rpupil(1:2)=[];
Message(1:2)=[];

% we've now got LpupilBase and Lpupil without blanks
% convert into matrixs
clipR = zeros(1,length(Rpupil));
clipL = zeros(1,length(Lpupil));
for j = 1:length(clipR)
    clipR(j) = str2double(Lpupil{j});
    clipL(j) = str2double(Rpupil{j}); 
end
for j = 1:length(Message)
 % remove raw values from Message
    tempMess = Message{j};
    tooBee = strfind(tempMess,'# Message:');
    if isempty(tooBee)
        Message{j} = 0;
    else
        valFound = strfind(tempMess,'alidation');
        calFound = strfind(tempMess,'alibration');
        if  ~isempty(valFound) || ~isempty(calFound) 
            Message{j} = 'Calibration';
        else
            exMess = Message{j};
            Message{j} = exMess(12:end);
        end
    end

end

Lpupil = clipL;
Rpupil = clipR;

