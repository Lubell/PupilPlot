function [Message,Lpupil,Rpupil,lPi,rPi] = importSMITXT(filename,lPi,rPi,startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [LRAWXPX,LRAWYPX,RRAWXPX,RRAWYPX,LDIAXPX,LDIAYPX,LMAPPEDDIAMETERMM,RDIAXPX,RDIAYPX,RMAPPEDDIAMETERMM]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [LRAWXPX,LRAWYPX,RRAWXPX,RRAWYPX,LDIAXPX,LDIAYPX,LMAPPEDDIAMETERMM,RDIAXPX,RDIAYPX,RMAPPEDDIAMETERMM]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [LRawXpx,LRawYpx,RRawXpx,RRawYpx,LDiaXpx,LDiaYpx,LMappedDiametermm,RDiaXpx,RDiaYpx,RMappedDiametermm] = importfile('chris_a-eye_data Samples.txt',39, 4323);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/01/13 14:01:38

%% Initialize variables.

% Use the variable Caterina to find startRow
Caterina = grabHeader(filename);

startingPlace = 39;

for catI = 1:length(Caterina)
    lineStr = Caterina(catI);
    
    if ~contains(lineStr,'##')
        startingPlace = catI;
        break
    end
end


delimiter = '\t';
if nargin<=4
    startRow = startingPlace;
    endRow = inf;
end

%% Format string for each line of text:
%   column4: text (%s)
%	column5: text (%s)
%   column6: text (%s)
%	column7: text (%s)
%   column8: text (%s)
%	column9: text (%s)
%   column10: text (%s)
%	column11: text (%s)
%   column12: text (%s)
%	column13: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%*s%*s%s%s%s%s%s%s%s%s%s%s%*s%*s%*s%*s%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
Message = dataArray{:, 1};



if isempty(lPi) && isempty(rPi)
    
    % Use the variable Caterina to find the 
    
    for colT = 1:length(dataArray)
        colName = dataArray{1,colT}{1,1};
        
        if strcmpi(colName,'L Mapped Diameter [mm]')
            lPi = colT;
        elseif strcmpi(colName,'R Mapped Diameter [mm]')
            rPi = colT;
        end
    end
    
    if isempty(lPi) || isempty(rPi)
        prompt = {'Enter Column # for Left Pupil:','Enter Column # for Right Pupil:'};
        dlg_title = 'Input Pupil Columns';
        num_lines = 1;
        def = {'1','2'};
        answer = inputdlg(prompt,dlg_title,num_lines,def);
        if isempty(answer)
            Message= 0;
            Lpupil= 0;
            Rpupil= 0;
            lPi= 0;
            rPi = 0;
            return
        end
        
        lPi = str2double(answer{1,1});
        rPi = str2double(answer{2,1});
    end
    
    
end


Lpupil = dataArray{:, lPi};
Rpupil = dataArray{:, rPi};

% Remove the column name row
Message(1) = [];
Lpupil(1) = [];
Rpupil(1) = [];


% convert into matrixes
clipR = zeros(1,length(Rpupil));
clipL = zeros(1,length(Lpupil));
for j = 1:length(clipR)
    clipR(j) = str2double(Rpupil{j});
    clipL(j) = str2double(Lpupil{j});
end



baseBlank = isnan(clipL);


% remove blanks
clipL(baseBlank)=0;
clipR(baseBlank)=0;


for j = 1:length(Message)
    % remove raw values from Message
    tempMess = Message{j};
    tooBee = strfind(tempMess,'# Message:');
    if isempty(tooBee)
        Message{j} = 0;
    else
        valFound = strfind(tempMess,'alidation');
        calFound = strfind(tempMess,'alibration');
        if  ~isempty(valFound) || ~isempty(calFound)
            Message{j} = 'Calibration';
        else
            exMess = Message{j};
            Message{j} = exMess(12:end);
        end
    end
    
end

Lpupil = clipL;
Rpupil = clipR;


function Caterina = grabHeader(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   CATERINA = IMPORTFILE(FILENAME) Reads data from text file FILENAME for
%   the default selection.
%
%   CATERINA = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   Caterina = importfile('1Caterina.K-eye_data Samples.txt', 1, 57);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/06/26 13:45:04

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 1;
    endRow = 100;
end

%% Format for each line of text:
%   column1: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    dataArray{1} = [dataArray{1};dataArrayBlock{1}];
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
Caterina = [dataArray{1:end-1}];
